(function(){"use strict";self.importScripts("spark-md5.min.js"),console.log("worker is working!!!");const l=5*1024*1024;function i(e,s){return new Promise((o,a)=>{let r=[],n=0;for(console.group();n<e.size;)r.push({chunkFile:e.slice(n,n+s)}),n+=s,console.log(`当前切割位置相对整个文件的大小${n/1024/1024}MB，总计${e.size/1024/1024}MB`);console.groupEnd(),o(r)})}const f=async(e,s)=>{try{const o=new SparkMD5.ArrayBuffer,a=new FileReader;a.readAsArrayBuffer(e),a.onload=n=>{o.append(n.target.result)},a.onerror=n=>{reject(n)};const r=o.end();console.log(`全量文件MD5${r}`),self.postMessage({percentage:100,fileHash:r,fileChunkList:s}),self.close()}catch(o){self.postMessage({name:"error",data:o}),self.close()}};async function u(e){const s=new SparkMD5.ArrayBuffer;let o=0;async function a(r){return r>=e.length?s.end():new Promise((n,g)=>{const t=new FileReader;t.readAsArrayBuffer(e[r].chunkFile),t.onload=c=>{s.append(c.target.result),o+=100/e.length,self.postMessage({percentage:o}),n(a(r+1))},t.onerror=c=>{g(c)}})}try{const r=await a(0);console.log("文件切片结果",r),self.postMessage({percentage:100,fileHash:r,fileChunkList:e}),self.close()}catch(r){self.postMessage({name:"error",data:r}),self.close()}}onmessage=async e=>{try{const{file:s,chunkSize:o}=e.data,a=await i(s,o);s.size<l?(console.log(`文件的大小小于${l/1024/1024}MB，采用全量计算，可能会崩溃😫,如果这都受不了，还真是一个杂鱼浏览器呢❤️❤️❤️`),await f(s,a)):await u(a)}catch(s){console.error("worker监听发生错误:",s)}},onerror=e=>{console.log("Worker触发主线程的error事件：",e),self.close()}})();
